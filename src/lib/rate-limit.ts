/**
 * Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ DDoS
 * –ü—Ä–æ—Å—Ç–∞—è in-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 */

interface RateLimitEntry {
  count: number;
  resetTime: number;
}

const rateLimitStore = new Map<string, RateLimitEntry>();

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
 */
function cleanup() {
  const now = Date.now();
  for (const [key, entry] of rateLimitStore.entries()) {
    if (entry.resetTime < now) {
      rateLimitStore.delete(key);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit
 * @param identifier - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (userId, IP, etc)
 * @param maxRequests - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
 * @param windowMs - –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, false –µ—Å–ª–∏ –ª–∏–º–∏—Ç exceeded
 */
export function checkRateLimit(
  identifier: string,
  maxRequests: number,
  windowMs: number
): boolean {
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  if (Math.random() < 0.1) {
    cleanup();
  }

  const now = Date.now();
  const entry = rateLimitStore.get(identifier);

  if (!entry || entry.resetTime < now) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    rateLimitStore.set(identifier, {
      count: 1,
      resetTime: now + windowMs,
    });
    return true;
  }

  // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
  entry.count++;

  if (entry.count > maxRequests) {
    console.log(`üö´ Rate limit exceeded for ${identifier}`);
    return false;
  }

  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è API endpoints
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param endpoint - –∏–º—è endpoint
 * @returns true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
 */
export function checkApiRateLimit(userId: string, endpoint: string): boolean {
  // –†–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
  const limits: Record<string, { max: number; window: number }> = {
    '/api/files/save': { max: 100, window: 60 * 1000 }, // 100 –≤ –º–∏–Ω—É—Ç—É
    '/api/files/upload': { max: 50, window: 60 * 1000 }, // 50 –≤ –º–∏–Ω—É—Ç—É
    '/api/files/delete': { max: 200, window: 60 * 1000 }, // 200 –≤ –º–∏–Ω—É—Ç—É
    '/api/files/get': { max: 300, window: 60 * 1000 }, // 300 –≤ –º–∏–Ω—É—Ç—É
    '/api/files/list': { max: 100, window: 60 * 1000 }, // 100 –≤ –º–∏–Ω—É—Ç—É
  };

  const limit = limits[endpoint] || { max: 100, window: 60 * 1000 };
  const identifier = `${userId}:${endpoint}`;

  return checkRateLimit(identifier, limit.max, limit.window);
}

